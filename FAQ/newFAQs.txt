---------------------------------------------------------------------------
NEW FAQS
---------------------------------------------------------------------------

How do I search all method bodies for a text string?

Thanks!

Put the string in the Workspace. Highlight it. Summon the menu with do
it/print it. Scroll down to the bottom where it says "more". Select. Scroll
down to "method with source". Voila.

Ugh, that does a full-text search on all method sources, very slow. Much faster is pressing Cmd-Shift-E (or "method strings with ir" from the menu) which only looks at string literals.

- Bert -

Indeed. A cool trick if you want to find the implementation behind a menu item: bring up the menu, shift-click the item, and press Cmd-Shift-E :)

- Bert -

---------------------------------------------------------------------------
Q How do I find out where a given primitive is used?
A
findPrim := [:prim | self systemNavigation browseAllSelect: [:method | method pragmas contains: [:pragma | (pragma keyword = #primitive:) and: [(pragma argumentAt: 1) = prim]]]].
findPrim value: 80
---------------------------------------------------------------------------
Q. I have a Class PoolQueue which has instvars 'member' and 'processor'. I find that an instance of PoolQueue when placed in an OrderedCollection can no longer be considered equal. I suppose I have to reimplement #= and #hash to allow PoolQueue instances to be compared.
My problem: how do I implement #hash? Or stated another way, what does #hash accomplish?
A. #hash should be reimplemented to make sure that objects considered to be equal will end up in the same hash bucket.
The usual trick is to take a bitXor of the hashes of the instance variables:
PoolQueue>>hash
	^ member hash bitXor: processor hash
(See page ...)
---------------------------------------------------------------------------
Q How can I recover changes after a crash?
Q How do I kill a process?
Q How do I obtain/simulate a real block closure?
---------------------------------------------------------------------------
